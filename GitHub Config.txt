How to config your local env GitHub.

1. SetUp your Git install file on your PC and register an account for GitHub on https://github.com

2. Config your GitHub.
   in the cmd line, type the command below:
   git config --global user.name ankailiu
   git config --global user.email ankailiu@163.com
   
3 create local ssh protocal to authorize connection between GitHub and your PC.
  type command below:
  ssh-keygen -t rsa -C "ankailiu@163.com"
  
  it will promot like:
  $ ssh-keygen -t rsa -C "ankailiu@163.com"
  Generating public/private rsa key pair.
  Enter file in which to save the key (/c/Users/Ankai Liu/.ssh/id_rsa):
  
  Use this command, it will promot to choose a ssh-key path. type 'Enter' as default, your ssh-key will be generated 
  in your default path. for  example '/c/Users/Ankai Liu/.ssh/'
  password confirm: No password . type 'Enter' to continue as default.
  
  
  4. config your ssh-key in GitHub.
  a)For windows default path is 'C:\Documents and Settings\Administrator\.ssh' or '/c/Users/Ankai Liu/.ssh/'
  open id_rsa.pub with notepad. Copy the code to GitHub's SSH
  
  id_rsa.pub content:
  ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAvlvc6NVozAr0qDVGDNF9UYCZvm6HhRginW9ug1apsWEbnsxWyNjGcoGTpTczEd+YnYwpNMw07YYifm6kRLo0FvY5psawMpNoHteF1n3b+mAXNy4z04Ae/k6BlzCymYhmUoYweMHLiE9WoYZQtLClWb4fRfMDjUR5c/MJ4YSiYvt16a5zdErnAr3gIXcATxK4YlPWNO0jEoQ5lFYvxkEU604U1orSVDh0BnutugvlvofF5NxPBf4jvPrCVExbGTmN2AZqr6OiyOcIZ6HU+X9yw8MS7B9QlhuO+V8OFLSckIA8i+b6HBfIkNyKd8srQe/L3Egv16pnbNDxpX7yApYLNQ== ankailiu@163.com

  b)log in GitHub.  Settings——SSH keys—— Add SSH Key.
  make an title and copy to the key.
  
  c) to test whether your configuration is OK.
  type command like in bash like: 
  ssh -T git@github.com
  
  then you may promte with a warning.
  Ankai Liu@SHA-LRI-PC- /D/testprj (master)
  $ ssh -T git@github.com
  The authenticity of host 'github.com (192.30.252.130)' can't be established.
  RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
  Are you sure you want to continue connecting (yes/no)? yes
  Warning: Permanently added 'github.com,192.30.252.130' (RSA) to the list of know
  n hosts.
  Hi ankailiu! You've successfully authenticated, but GitHub does not provide shel
  l access.
  
  it means your configuration is OK.  can connect with GitHub successfully.


 5 Create  your VCS(version control system)
   a)
   $ make dir testprj  #testprj is your project name.
   $ cd testprj        # change directory to your project. 
   $ pwd               # print your current directory.

   b)initialize your VCS by command 'git init'
   $ git init
   it will print out:
   Initalized empty Git repository in  '.../testprj/.git/'
   
   .git directory is Git repository. 

   c) Create a new repository on GitHub.

   d) create/modfiy/delete/rename a file in your VCS.
     example:  
     touch README  #create a file named README.
     git add README   #add README to cache.
     git commit -m 'first commit commenet' #commit your file to local repository with comment'

 6 Sync your local file with GitHub.
     git remote add testprj https://github.com/ankailiu/testprj.git


    git pull -u testprj master          
    git push -u testprj master

   		 

   




********************************************
Clone an existing cvs into your PC.

git clone git://github.com/ankailiu/testprj.git  /d/myproject     # clone an existing project in GitHub to your assigned path.



$git init git_basis
$git status          #view staging area commit log.
$cd git_basis/
example: 

$touch a 
$touch b
$git add a b
$git status

new file: a
new file: b
$git commit -m "initial commit a,b file"
create mode 100644 a
create mode 100644 b

$git rm a     # remove file a from  working and staging area.
rm 'a'    
ls  #only b file is existed.

$git reset HEAD a    # reset a file to previous status.
$ls  #only file b is list.
$git checkout a    #checkout file a.
$ls  #list file  a & b.

$git rm --cache a   # only remove file a from staging area  but not remove it from workign area.
$git status 
untracked files:
a                  # file a is not tracked,need to be committed.

$git mv a c 
$git status 
renamed:    a -->c    # rename file a  to c.





***************************** git usage ******************
a)
$git init --bare git_bare_repo           #create a bare git warehouse named 'git_bare_repo' (not with working area)
$cd git_bare_repo/

b) make an existing file which need to be managed by git.
method 1:
$makedir git_init_repo   #a common folder 'git_init_repo'.
$cd git_init_repo
$git init git_init_repo   #make folder 'git_init_repo' managed by git.

method 2:
$git clone git_bare_repo/    git_clone_repo     
#clone a git warehouse 'git_bare_repo'(remote address) to 'git_clone_repo'(local address, eg: 'd:/test/').











//*************************************.gitignore usage **********************************
$vim .gitignore    #open .gitignore and edit file.

a) 
*.[oa]      #end with o or a files will not be able to add into git warehouse.

b)
!test.pyc   #to exclude ignored file which is end with '*.pyc'.(test.pyc will not be ignored.)

c)
\!test.pyc    #make test.pyc managed by git.

d)
foo/    # foo is a directory. 
        # If there is a file named foo, it will not be mananged.
        
e)
**/res   # '**/' means 0 or multiple directory.   name with res's sub directory or parent directory 







  
  
  
  
