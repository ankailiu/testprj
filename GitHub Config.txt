How to config your local env GitHub.

1. SetUp your Git install file on your PC and register an account for GitHub on https://github.com

2. Config your GitHub.
   in the cmd line, type the command below:
   git config --global user.name ankailiu
   git config --global user.email ankailiu@163.com
   
3 create local ssh protocal to authorize connection between GitHub and your PC.
  type command below:
  ssh-keygen -t rsa -C "ankailiu@163.com"
  
  it will promot like:
  $ ssh-keygen -t rsa -C "ankailiu@163.com"
  Generating public/private rsa key pair.
  Enter file in which to save the key (/c/Users/Ankai Liu/.ssh/id_rsa):
  
  Use this command, it will promot to choose a ssh-key path. type 'Enter' as default, your ssh-key will be generated 
  in your default path. for  example '/c/Users/Ankai Liu/.ssh/'
  password confirm: No password . type 'Enter' to continue as default.
  
  
  4. config your ssh-key in GitHub.
  a)For windows default path is 'C:\Documents and Settings\Administrator\.ssh' or '/c/Users/Ankai Liu/.ssh/'
  open id_rsa.pub with notepad. Copy the code to GitHub's SSH
  
  id_rsa.pub content:
  ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAvlvc6NVozAr0qDVGDNF9UYCZvm6HhRginW9ug1apsWEbnsxWyNjGcoGTpTczEd+YnYwpNMw07YYifm6kRLo0FvY5psawMpNoHteF1n3b+mAXNy4z04Ae/k6BlzCymYhmUoYweMHLiE9WoYZQtLClWb4fRfMDjUR5c/MJ4YSiYvt16a5zdErnAr3gIXcATxK4YlPWNO0jEoQ5lFYvxkEU604U1orSVDh0BnutugvlvofF5NxPBf4jvPrCVExbGTmN2AZqr6OiyOcIZ6HU+X9yw8MS7B9QlhuO+V8OFLSckIA8i+b6HBfIkNyKd8srQe/L3Egv16pnbNDxpX7yApYLNQ== ankailiu@163.com

  b)log in GitHub.  Settings——SSH keys—— Add SSH Key.
  make an title and copy to the key.
  
  c) to test whether your configuration is OK.
  type command like in bash like: 
  ssh -T git@github.com
  
  then you may promte with a warning.
  Ankai Liu@SHA-LRI-PC- /D/testprj (master)
  $ ssh -T git@github.com
  The authenticity of host 'github.com (192.30.252.130)' can't be established.
  RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.
  Are you sure you want to continue connecting (yes/no)? yes
  Warning: Permanently added 'github.com,192.30.252.130' (RSA) to the list of know
  n hosts.
  Hi ankailiu! You've successfully authenticated, but GitHub does not provide shel
  l access.
  
  it means your configuration is OK.  can connect with GitHub successfully.


 5 Create  your VCS(version control system)
   a)
   $ make dir testprj  #testprj is your project name.
   $ cd testprj        # change directory to your project. 
   $ pwd               # print your current directory.

   b)initialize your VCS by command 'git init'
   $ git init
   it will print out:
   Initalized empty Git repository in  '.../testprj/.git/'
   
   .git directory is Git repository. 

   c) Create a new repository on GitHub.

   d) create/modfiy/delete/rename a file in your VCS.
     example:  
     touch README  #create a file named README.
     git add README   #add README to cache.
     git commit -m 'first commit commenet' #commit your file to local repository with comment'

 6 Sync your local file with GitHub.
     git remote add testprj https://github.com/ankailiu/testprj.git


    git pull -u testprj master          
    git push -u testprj master

   		 

   




********************************************
Clone an existing cvs into your PC.

git clone git://github.com/ankailiu/testprj.git  /d/myproject     # clone an existing project in GitHub to your assigned path.



$git init git_basis
$git status          #view staging area commit log.
$cd git_basis/
example: 

$touch a 
$touch b
$git add a b
$git status

new file: a
new file: b
$git commit -m "initial commit a,b file"
create mode 100644 a
create mode 100644 b

$git rm a     # remove file a from  working and staging area.
rm 'a'    
ls  #only b file is existed.

$git reset HEAD a    # reset a file to previous status.
$ls  #only file b is list.
$git checkout a    #checkout file a.
$ls  #list file  a & b.

$git rm --cache a   # only remove file a from staging area  but not remove it from workign area.
$git status 
untracked files:
a                  # file a is not tracked,need to be committed.

$git mv a c 
$git status 
renamed:    a -->c    # rename file a  to c.







$git checkout -b feature //在当前默认分支上创建一个分支feature
$vim test1.txt
$git add test1.txt
$git commit -m "add teest1.txt"
$git push origin feature  把feature分支推送到默认分支上 在github上就多了一个feature分支啦。。。




*****************************git configuration**********************
1. Configure your username and email.
$git config --global user.name "Example username"
$git config --global user.email "ankailiu@163.com"
# Set default so that all changes are always pushed to the repo
$git config --global push.default "matching" 

2. Get the Git configure info.
$git config --list

3. Highlight your git terminal.
$git config --global color.status auto
$git config --global color.branch auto

4. 
Use .gitkeep to track your empty directory. (Git ignore empty direcotry)
core.excludesfile to config your global ignoring files.








***************************** git usage ******************
a)
$git init --bare git_bare_repo           #create a bare git warehouse named 'git_bare_repo' (not with working area)
$cd git_bare_repo/

b) make an existing file which need to be managed by git.
method 1:
$makedir git_init_repo   #a common folder 'git_init_repo'.
$cd git_init_repo
$git init git_init_repo   #make folder 'git_init_repo' managed by git.

method 2:
$git clone git_bare_repo/    git_clone_repo     
#clone a git warehouse 'git_bare_repo'(remote address) to 'git_clone_repo'(local address, eg: 'd:/test/').

c)
git diff          #list diff changes of files.

d)
git log          #list git commit history log.
gitk --all       #git log tree.

e)
git commit -m "message"  #commit with comment.
git commit --amend -m  "revise last comment message"  # update the last commit comment.

f)
git remote     #show the existing defined remote repositories.

g)git checkout commit_name
# Copy one of the older commits and checkout the older version.
# if no comit_name, will revert to the last commit point.

or you can

git revert commit_name
git reset HEAD test01    #Restore a file in the staging index.

h) git reset file_name to remove a file from  index.
$touch incorrect.txt
$git add .   #Accidently add it to the index.
$git reset incorrect.txt  #Remove it from the index.
$rm incorrect.txt   #remove it from working area.

i) 
git checkout HEAD -- your_dir_to_restore        #Restore a directory which are deleted from commit(but not from remote)
# Have a test,but seems not work.


j)
#If you remove a file which is under version control. 'git add .' command will not put this file in index, we need to 
use 'git add -A .' command instead to put it in index. and recommit & push.
$mkdir testdir 
$cd testdir
$touch test001
$git add .      
$git commit -m 'commit testdir and its file'
$git push -u testprj master          #create a file and push it to remote.

$git add -A .
$git commit -m 'remove testdir'  #recommit
$git push -u testprj master      #push successfully.

k)
$git tag version1.6 -m 'version 1.1'   //generates a tag with comment 'version1.1'
$git checkout version1.1       //restore to version1.1.

l)
$git branch   #list branches, current branch will be promoted with '*'
$git branch -a  # list all remote branches.

# Syntax: git branch <name> <hash>
# <hash> in the above is optional 
# if not specified the last commit will be used
# If specified the corresponding commit will be used
$git branch testing
# Switch to your new branch
$git checkout testing
# Some changes
echo "Cool new feature in this branch" > test01
$git commit -a -m "new feature"
# Switch to the master branch
$git checkout master
# Check that the content of test01 is the old one
cat test01

#Merge
$git merge testing

#Delete branch testing
$git branch -d testing
# Check if branch has been deleted
$git branch


#Push../
# Push testing branch to remote repository
$git push origin testing

# Switch to the testing branch
$git checkout testing

# Some changes
echo "News for you" > test01
$git commit -a -m "new feature in branch"

# Push all including branch
$git push


m)
Rebase

# Create a new file
$touch rebase.txt

# Add it to git
$git add . && git commit -m "rebase.txt added to index"

# Do some silly changes and commit
$echo "content" >> rebase.txt
$git add . && git commit -m "added content"
$echo " more content" >> rebase.txt
$git add . && git commit -m "added more content"
$echo " more content" >> rebase.txt
$git add . && git commit -m "added more content"
$echo " more content" >> rebase.txt
$git add . && git commit -m "added more content"
$echo " more content" >> rebase.txt
$git add . && git commit -m "added more content"
$echo " more content" >> rebase.txt
$git add . && git commit -m "added more content"

# Check the git log message
$git log

n)
放弃跟踪文件
有时候，你不希望某些文件或者文件夹被包含在Git仓库中。但是如果你把它们加到.gitignore文件中以后，Git会停止跟踪这个文件。但是它不会将这个文件从仓库中删除。这导致了文件或者文件夹的最后一个版本还是存在于仓库中。为了取消跟踪这些文件或者文件夹，你可以使用如下的命令

# Remove directory .metadata from git repo
$git rm -r --cached .metadata
# Remove file test.txt from repo
$git rm --cached test.txt
这样做不会将这些文件从commit历史中去掉。如果你想将这些文件从commit历史中去掉，可以参考git filter-branch命令

$git blame filename	谁创建了或者是修改了这个文件

o)
git log --oneline --decorate --graph --all  #历史示意图
git show tagname    #tag包含的提交信息
git checkout -b branchnmae  # git branch & git checkout 切换到一个新的分支上去工作。
git stash clear
git stash list











//*************************************.gitignore usage **********************************
$vim .gitignore    #open .gitignore and edit file.

a) 
*.[oa]      #end with o or a files will not be able to add into git warehouse.

b)
!test.pyc   #to exclude ignored file which is end with '*.pyc'.(test.pyc will not be ignored.)

c)
\!test.pyc    #make test.pyc managed by git.

d)
foo/    # foo is a directory. 
        # If there is a file named foo, it will not be mananged.
        
e)
**/res   # '**/' means 0 or multiple directory.   name with res's sub directory or parent directory 







  
  
  
  
